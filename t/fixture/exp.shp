BEGIN {
  ! "## tests for = ##"
  ! 1 = 1, true
  ! 1 = 2, false
  ! { return 1, 2 } = { return 1, 3 }, true

  ! "## tests for > ##"
  ! 2 > 1, true
  ! 1 > 1, false
  ! { return 2, 2 } > { return 1, 3 }, true

  ! "## tests for < ##"
  ! 1 < 2, true
  ! 1 < 1, false
  ! { return 2, 2 } < { return 3, 1 }, true

  ! "## tests for >= ##"
  ! 2 >= 1, true
  ! 2 >= 2, true
  ! 1 >= 2, false
  ! { return 2, 2 } >= { return 1, 3 }, true

  ! "## tests for <= ##"
  ! 1 <= 2, true
  ! 2 <= 2, true
  ! 2 <= 1, false
  ! { return 2, 2 } <= { return 3, 1 }, true

  ! "## tests for :: ##"
  ! 1 :: [2, 3] = [1, 2, 3], true
  ! [1, 2] :: [2, 3] = [[1, 2], 2, 3], true

  ! "## tests for + ##"
  ! 1 + 1, 2
  ! { return 1, 2 } + { return 3, 4 }, 4

  ! "## tests for - ##"
  ! 2 - 1, 1
  ! { return 3, 5 } - { return 1, 2 }, 2

  ! "## tests for / ##"
  ! 2 / 3, "2/3"
  ! { return 2, 3 } / { return 5, 7 }, "2/5"

  ! "## tests for * ##"
  ! 2 * 3, 6
  ! { return 2, 3 } * { return 5, 7 }, 10

  ! "## tests for rational arith ##"
  ! 2/3 + 1, 5/3
  ! 1 + 2/3, 5/3
  ! 5/3 - 1, 2/3
  ! 1 - 1/3, 2/3
  ! 2/3 * 3, 2
  ! 3 * 2/3, 2
  ! 1/3 + 2/3, 1

  ! "## tests for function application ##"
  ! (@x, y -> x * y) @ 2, 3
  ! (@x, y -> x * y) @ { return 2, 3 }
  ! (@x, y -> x * y) @ { return }, { return 2, 3 }, { return }
  ! (@x, y -> x * y) @ { return }, 2, { return 3 }
  ! (@x, y -> x * y) @ { return 2 }, 3, { return }
  ! (@ -> 6) @ { return }
  ! (@ -> 6) @ { return }, { return }
  ! (@x, y -> x * y)(2, 3)
  ! (@ -> 6)()

  ! "## tests for pipe function application ##"
  ! { return 2, 3 } | @x, y -> x * y
  ! { return } | @ -> 6
  ! 1 | @x -> x + 2 | @x -> x + 3
  ! { return 1, 2 } | @x, y -> { return x + 1, y + 1 } | @x, y -> x * y

  ! "## tests for lists ##"
  ! [] = []
  ! [1] = [1]
  ! [1, 2] = [1, 2]
  ! [1, 2, { return }] = [1, 2]
  ! [{ return 1, 2 }] = [1, 2]
  ! [{ return }, { return 1, 2 }, { return }] = [1, 2]
  ! [{ return }, 1, { return 2 }] = [1, 2]
  ! [{ return 1 }, 2, { return }] = [1, 2]
  ! [{ return }] = []
  ! [{ return }, { return }] = []
}
